import * as fs from 'fs';
import * as path from 'path';

export interface FrontendConfig {
  apiGatewayUrl: string;
  apiKeyValue: string;
  apiKeyId: string;
}

/**
 * Reads frontend configuration from the .env file generated by task 1.5.2
 * This configuration includes API Gateway URL and API key information
 */
export function readFrontendConfig(): FrontendConfig {
  const envPath = path.join(__dirname, '../../frontend/.env');
  
  if (!fs.existsSync(envPath)) {
    throw new Error(`Frontend .env file not found at ${envPath}. Please run task 1.5.2 first to generate the configuration.`);
  }

  const envContent = fs.readFileSync(envPath, 'utf-8');
  const envLines = envContent.split('\n');
  
  const config: Partial<FrontendConfig> = {};
  
  for (const line of envLines) {
    const trimmedLine = line.trim();
    
    // Skip comments and empty lines
    if (trimmedLine.startsWith('#') || !trimmedLine) {
      continue;
    }
    
    const [key, value] = trimmedLine.split('=', 2);
    if (!key || !value) {
      continue;
    }
    
    switch (key.trim()) {
      case 'VITE_API_BASE_URL':
        config.apiGatewayUrl = value.trim();
        break;
      case 'API_KEY_VALUE':
        config.apiKeyValue = value.trim();
        break;
      case 'API_KEY_ID':
        config.apiKeyId = value.trim();
        break;
    }
  }
  
  // Validate that all required configuration is present
  if (!config.apiGatewayUrl) {
    throw new Error('VITE_API_BASE_URL not found in .env file');
  }
  
  if (!config.apiKeyValue) {
    throw new Error('API_KEY_VALUE not found in .env file');
  }
  
  if (!config.apiKeyId) {
    throw new Error('API_KEY_ID not found in .env file');
  }
  
  return config as FrontendConfig;
}